using System;
using System.Collections.Generic;
using JetBrains.Annotations;

namespace Euler
{
    static class Program
    {
        static void Main([CanBeNull] string[] args)
        {

        }
    }

    public static class NaturalNumbers
    {
        /*
         * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
         * Find the sum of all the multiples of 3 or 5 below 1000. 
         */
        public static long SumMultiplesOf3And5Under1000()
        {
            long result = 0;
            var multiplesOf3 = new HashSet<int>();
            var multiplesOf5 = new HashSet<int>();

            for (int index = 1; index < 1000; index++)
            {
                if (index % 3 == 0) { multiplesOf3.Add(index); }
                if (index % 5 == 0) { multiplesOf5.Add(index); }
            }
            multiplesOf5.UnionWith(multiplesOf3);
            var values = new int[multiplesOf5.Count];
            multiplesOf5.CopyTo(values);

            Array.ForEach(values, item => result += item);
            return result;
        }

        /*
         * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
         * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
         */
        public static long SumEvenFibonacciUnder4Million()
        {
            long result = 0;

            long actualValue = 0;
            int iteration = 0;
            while (actualValue < 4000000)
            {
                iteration++;
                actualValue = Fibonacci(iteration);
                if (actualValue % 2 == 0 && actualValue < 4000000) { result += actualValue; }
            }

            return result;
        }

        private static long Fibonacci(int iteration)
        {
            if (iteration <= 0) { return 0; }
            if (iteration == 1) { return 1; }
            if (iteration == 2) { return 2; }
            return Fibonacci(iteration - 2) + Fibonacci(iteration - 1);

            //round( Phi^n / √5 ) Phi = (1+√5) / 2

        }

        /*
         * The prime factors of 13195 are 5, 7, 13 and 29.
         * What is the largest prime factor of the number 600851475143 ?
         */
        public static long LargestPrimeFactorOf600851475143()
        {
            return LargestPrimeFactorOf(600851475143);
        }

        private static long LargestPrimeFactorOf(long numberToFactorize)
        {
            var allPrimesFactors = PrimesFactorsOf(numberToFactorize);
            Array.Sort(allPrimesFactors);
            return allPrimesFactors[allPrimesFactors.Length - 1];
        }

        [NotNull]
        private static long[] PrimesFactorsOf(long numberToFactorize)
        {
            var factors = new HashSet<long>();
            var sieve = 2;
            while (numberToFactorize > 1)
            {
                while (numberToFactorize % sieve == 0)
                {
                    factors.Add(sieve);
                    numberToFactorize /= sieve;
                }
                sieve = sieve + 1;
                if (sieve * sieve <= numberToFactorize) { continue; }
                if (numberToFactorize > 1) { factors.Add(numberToFactorize); }
            }

            var result = new long[factors.Count];
            factors.CopyTo(result);
            return result;
        }
    }

}